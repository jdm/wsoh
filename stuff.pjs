/* -*- tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*- */

////////////////////////////////////////////////////////////////////////////////
// stuff.pjs
////////////////////////////////////////////////////////////////////////////////

// constants
int centreRadius = 25;
int rate = 5; // lower rate

// current beats per minute, doesn't allow for multiple bpms
int curbpm = 0;
// universal tick count
int ticks = 0;

// required by processing.js
void setup() {
    size(screen.width, screen.height);
    frameRate(rate);

    // plops down the center
    int cx = width / 2 - centreRadius;
    int cy = height / 2 - centreRadius;
    HomeNode.x = cx;
    HomeNode.y = cy;
    HomeNode.size = centreRadius;
    HomeNode.influence = 200;
}

function circle(x,y,radius) {
    ellipse(x,y,2*radius,2*radius);
}

// required by processing.js
void draw() {
    // drawing background
    background(125);
    fill(255);

    if (curbpm != bpm) {
        curbpm = bpm;
        ticks = curbpm / 60;
    }

    //// Draw Layers
    // Draw the influence circles
    for (int i = 0; i < nodeList.length; i++) {
        var node = nodeList[i];

        if(node.mouseOver) {
            println("show influence circle");
            // display an influence circle, opacity
            fill(color(255, 255, 255, 50));
            stroke(color(0,0,0,100));
            circle(node.x, node.y, node.influence);
        } else {
            fill(color(255, 255, 255, 20));
            stroke(color(0,0,0,20));
            circle(node.x, node.y, node.influence);
        }
    }
    // reset the stroke
    stroke(color(0,0,0,255));

    // Draw relationships
    for (int i=0; i < nodeList.length; i++) {
        var node = nodeList[i];
        stroke(0);
        fill(0);
        int base = 1.5;
        for(int j=0; j < node.inputNodes.length; j++) {
            // input into this node
            var parent = node.inputNodes[j];
            // replace with a triangle, to show direction
            int dx = parent.x - node.x;
            int dy = parent.y - node.y;
            int norm = dist(0,0, dx,dy);
            triangle(parent.x + base*dy/norm, parent.y - base*dx/norm,
                     parent.x - base*dy/norm, parent.y + base*dx/norm,
                     node.x, node.y);
        }
    }

    // Draw all nodes proper
    //println(nodeList.length);
    for (int i = 0; i < nodeList.length; i++) {
        var node = nodeList[i];
        fill(node.color);

        switch (node.shape) {
        case Circle:
            circle(node.x, node.y, node.size);
            break;
        case Square:
            rect(node.x - node.size, node.y - node.size, node.size * 2, node.size * 2);
            break;
        }
    }
    generateAudio();
}

////////////////////////////////////////////////////////////////////////////////
// Mouse events

void mouseClicked() {
    // check if the click falls into an object
    for (int i = 0; i < nodeList.length; i++) {
        var node = nodeList[i];
        if (node.pointInShape.call(node, mouseX, mouseY)) {
            // remove node, and all inputs
            removeNode(i);
            for (int j = 0; j < nodeList.length; j++) {
                var k = nodeList[j].inputNodes.indexOf(node);
                if(k != -1) {
                    nodeList[j].inputNodes.splice(k, 1);
                    nodeList[j].inputs.splice(k, 1);
                }
            }
            println("kill");
            return;
        }
    }
    // otherwise, we're placing an object
    int x = mouseX;
    int y = mouseY;
    // don't insert yet
    var newNode = make_random_osc(x, y);
    // add us as children if inside influence
    for (int i = 0; i < nodeList.length; i++) {
        var node = nodeList[i];
        if (node.intersect.call(node, newNode)) {
            // newNode will take node as an influence
            node.inputNodes.push(newNode);
        }
    }
    addNode(newNode);
}

void mouseMoved() {
    for (int i = 0; i < nodeList.length; i++) {
        var node = nodeList[i];
        if (node.pointInShape.call(node, mouseX, mouseY)) {
            node.mouseOver = true;
        } else {
            node.mouseOver = false;
        }
    } 
}
